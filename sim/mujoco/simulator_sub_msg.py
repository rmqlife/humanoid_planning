"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class simulator_sub_msg(object):

    __slots__ = ["timestamp", "motorNum", "started", "qCmd", "qDotCmd", "torqCmd", "q_kp", "q_kd"]

    __typenames__ = ["int64_t", "int32_t", "int8_t", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, ["motorNum"], ["motorNum"], ["motorNum"], ["motorNum"], ["motorNum"]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.motorNum = 0
        """ LCM Type: int32_t """
        self.started = 0
        """ LCM Type: int8_t """
        self.qCmd = []
        """ LCM Type: double[motorNum] """
        self.qDotCmd = []
        """ LCM Type: double[motorNum] """
        self.torqCmd = []
        """ LCM Type: double[motorNum] """
        self.q_kp = []
        """ LCM Type: double[motorNum] """
        self.q_kd = []
        """ LCM Type: double[motorNum] """

    def encode(self):
        buf = BytesIO()
        buf.write(simulator_sub_msg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qib", self.timestamp, self.motorNum, self.started))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.qCmd[:self.motorNum]))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.qDotCmd[:self.motorNum]))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.torqCmd[:self.motorNum]))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.q_kp[:self.motorNum]))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.q_kd[:self.motorNum]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != simulator_sub_msg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return simulator_sub_msg._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = simulator_sub_msg()
        self.timestamp, self.motorNum, self.started = struct.unpack(">qib", buf.read(13))
        self.qCmd = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.qDotCmd = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.torqCmd = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.q_kp = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.q_kd = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if simulator_sub_msg in parents: return 0
        tmphash = (0x3c7f44af50330df9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if simulator_sub_msg._packed_fingerprint is None:
            simulator_sub_msg._packed_fingerprint = struct.pack(">Q", simulator_sub_msg._get_hash_recursive([]))
        return simulator_sub_msg._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", simulator_sub_msg._get_packed_fingerprint())[0]


"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class simulator_pub_msg(object):

    __slots__ = ["timestamp", "motorNum", "q", "qDot", "acc", "omega", "quat", "lf_touch", "rf_touch", "pos", "vel"]

    __typenames__ = ["int64_t", "int32_t", "double", "double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, ["motorNum"], ["motorNum"], [3], [3], [4], None, None, [3], [3]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.motorNum = 0
        """ LCM Type: int32_t """
        self.q = []
        """ LCM Type: double[motorNum] """
        self.qDot = []
        """ LCM Type: double[motorNum] """
        self.acc = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.omega = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.quat = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: double[4] """
        self.lf_touch = 0.0
        """ LCM Type: double """
        self.rf_touch = 0.0
        """ LCM Type: double """
        self.pos = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """
        self.vel = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: double[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(simulator_pub_msg._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.timestamp, self.motorNum))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.q[:self.motorNum]))
        buf.write(struct.pack('>%dd' % self.motorNum, *self.qDot[:self.motorNum]))
        buf.write(struct.pack('>3d', *self.acc[:3]))
        buf.write(struct.pack('>3d', *self.omega[:3]))
        buf.write(struct.pack('>4d', *self.quat[:4]))
        buf.write(struct.pack(">dd", self.lf_touch, self.rf_touch))
        buf.write(struct.pack('>3d', *self.pos[:3]))
        buf.write(struct.pack('>3d', *self.vel[:3]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != simulator_pub_msg._get_packed_fingerprint():
            raise ValueError("Decode error")
        return simulator_pub_msg._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = simulator_pub_msg()
        self.timestamp, self.motorNum = struct.unpack(">qi", buf.read(12))
        self.q = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.qDot = struct.unpack('>%dd' % self.motorNum, buf.read(self.motorNum * 8))
        self.acc = struct.unpack('>3d', buf.read(24))
        self.omega = struct.unpack('>3d', buf.read(24))
        self.quat = struct.unpack('>4d', buf.read(32))
        self.lf_touch, self.rf_touch = struct.unpack(">dd", buf.read(16))
        self.pos = struct.unpack('>3d', buf.read(24))
        self.vel = struct.unpack('>3d', buf.read(24))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if simulator_pub_msg in parents: return 0
        tmphash = (0xa55f62978bf6e88f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if simulator_pub_msg._packed_fingerprint is None:
            simulator_pub_msg._packed_fingerprint = struct.pack(">Q", simulator_pub_msg._get_hash_recursive([]))
        return simulator_pub_msg._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", simulator_pub_msg._get_packed_fingerprint())[0]

